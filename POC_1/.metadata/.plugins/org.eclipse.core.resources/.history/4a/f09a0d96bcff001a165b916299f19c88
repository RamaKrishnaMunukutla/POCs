package com.poc.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.poc.dao.JobDao;
import com.poc.model.Job;
import com.poc.model.SuccessResponse;
import com.poc.utility.ExcelHelper;

@Service
public class JobServiceImpl implements JobService {

	@Autowired
	private JobDao jobDao;
	SuccessResponse successResponse = new SuccessResponse();
	Logger logger = Logger.getLogger(this.getClass());

	@Override
	public SuccessResponse createJob(Job job) {
		logger.debug("incoming request for createJob JobServiceImpl ::::" + job);
		try {
			List<Job> jobList = new ArrayList<Job>();
			Job saveJob = jobDao.save(job);
			jobList.add(saveJob);
			if (saveJob != null) {
				successResponse.setStatusCode("200");
				successResponse.setStatusMessage("Job created successfully");
				successResponse.setJoblist(jobList);
				return successResponse;
			}
			else {
				successResponse.setStatusCode("422");
				successResponse.setStatusMessage("failed to create job");
				return successResponse;
			}
		} catch (Exception e) {
			successResponse.setStatusCode("422");
			successResponse.setStatusMessage(e.getMessage());
			return successResponse;
		}
	}

	@Override
	public SuccessResponse getJobById(int id) {
		logger.debug("incoming request for getJobById JobServiceImpl ::::" + id);
		List<Job> jobList = new ArrayList<>();
		try {
		 List<Job> findJobById = jobDao.findJobById(id);
		 if(findJobById!=null) {
			 successResponse.setStatusCode("200");
			 successResponse.setStatusMessage("record fetched successfully");
			 successResponse.setJoblist(findJobById);
			 return successResponse;
		 }
		 else {
			 successResponse.setStatusCode("200");
			 successResponse.setStatusMessage("record is not found");
			 successResponse.setJoblist(jobList);
			 return successResponse;
		 }
		} catch (Exception e) {
			 successResponse.setStatusCode("422");
			 successResponse.setStatusMessage(e.getMessage());
			 return successResponse;
		}
	}

	@Override
	public SuccessResponse getJobByType(String jobType) {
		logger.debug("incoming request for getJobById JobServiceImpl ::::" + id);

		List<Job> jobList = new ArrayList<>();
		try {
			 List<Job> findJobByType = jobDao.findJobByType(jobType);
			 if(findJobByType!=null) {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record fetched successfully");
				 successResponse.setJoblist(findJobByType);
				 return successResponse;
			 }
			 else {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record is not found");
				 successResponse.setJoblist(jobList);
				 return successResponse;
			 }
			} catch (Exception e) {
				 successResponse.setStatusCode("422");
				 successResponse.setStatusMessage(e.getMessage());
				 return successResponse;
			}
	}

	@Override
	public SuccessResponse getJobByExp(int exp) {
		
		List<Job> jobList = new ArrayList<>();
		try {
			 List<Job> findJobByExp = jobDao.findJobByExp(exp);
			 if(findJobByExp!=null) {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record fetched successfully");
				 successResponse.setJoblist(findJobByExp);
				 return successResponse;
			 }
			 else {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record is not found");
				 successResponse.setJoblist(jobList);
				 return successResponse;
			 }
			} catch (Exception e) {
				 successResponse.setStatusCode("422");
				 successResponse.setStatusMessage(e.getMessage());
				 return successResponse;
			}
	}

	@Override
	public SuccessResponse getJobByCountry(String country) {

		List<Job> jobList = new ArrayList<>();
		try {
			  List<Job> findJobByCountry = jobDao.findJobByCountry(country);
			 if(findJobByCountry!=null) {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record fetched successfully");
				 successResponse.setJoblist(findJobByCountry);
				 return successResponse;
			 }
			 else {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record is not found");
				 successResponse.setJoblist(jobList);
				 return successResponse;
			 }
			} catch (Exception e) {
				 successResponse.setStatusCode("422");
				 successResponse.setStatusMessage(e.getMessage());
				 return successResponse;
			}
	}

	@Override
	public SuccessResponse getJobByAvailability(String availability) {
		List<Job> jobList = new ArrayList<>();
		try {
			  List<Job> findJobByAvailability = jobDao.findJobByAvailability(availability);
			 if(findJobByAvailability!=null) {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record fetched successfully");
				 successResponse.setJoblist(findJobByAvailability);
				 return successResponse;
			 }
			 else {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record is not found");
				 successResponse.setJoblist(jobList);
				 return successResponse;
			 }
			} catch (Exception e) {
				 successResponse.setStatusCode("422");
				 successResponse.setStatusMessage(e.getMessage());
				 return successResponse;
			}
	}

	@Override
	public SuccessResponse getJobBySkills(String skills) {
		List<Job> jobList = new ArrayList<>();
		try {
			List<Job> findJobBySkills = jobDao.findJobBySkills(skills);
			 if(findJobBySkills!=null) {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record fetched successfully");
				 successResponse.setJoblist(findJobBySkills);
				 return successResponse;
			 }
			 else {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record is not found");
				 successResponse.setJoblist(jobList);
				 return successResponse;
			 }
		} catch (Exception e) {
			 successResponse.setStatusCode("422");
			 successResponse.setStatusMessage(e.getMessage());
			 return successResponse;
		}
	}

	@Override
	public SuccessResponse getJobByLanguage(String language) {
		List<Job> jobList = new ArrayList<>();
		try {
			   List<Job> findJobByLanguage = jobDao.findJobByLanguage(language);
			 if(findJobByLanguage!=null) {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record fetched successfully");
				 successResponse.setJoblist(findJobByLanguage);
				 return successResponse;
			 }
			 else {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record is not found");
				 successResponse.setJoblist(jobList);
				 return successResponse;
			 }
			} catch (Exception e) {
				 successResponse.setStatusCode("422");
				 successResponse.setStatusMessage(e.getMessage());
				 return successResponse;
			}
	}

	@Override
	public SuccessResponse getJobByPayRate(int low, int high) {
		List<Job> jobList = new ArrayList<>();
		try {
			 List<Job> findJobByPayRate = jobDao.findJobByPayRate(low, high);
			 if(findJobByPayRate!=null) {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record fetched successfully");
				 successResponse.setJoblist(findJobByPayRate);
				 return successResponse;
			 }
			 else {
				 successResponse.setStatusCode("200");
				 successResponse.setStatusMessage("record is not found");
				 successResponse.setJoblist(jobList);
				 return successResponse;
			 }
			} catch (Exception e) {
				 successResponse.setStatusCode("422");
				 successResponse.setStatusMessage(e.getMessage());
				 return successResponse;
			}
	}

	@Override
	public SuccessResponse getAllJobs() {
	try {
		List<Job> jobList = new ArrayList<>();
		List<Job> findAll = jobDao.findAll();
		if (!findAll.isEmpty() && findAll!=null) {
			 successResponse.setStatusCode("200");
			 successResponse.setStatusMessage("records fetched successfully");
			 successResponse.setJoblist(findAll);
			 return successResponse;
			
		} else {
			 successResponse.setStatusCode("200");
			 successResponse.setStatusMessage("records not found");
			 successResponse.setJoblist(jobList);
			 return successResponse;
		}
		
	} catch (Exception e) {
		 successResponse.setStatusCode("422");
		 successResponse.setStatusMessage(e.getMessage());
		 return successResponse;
	}
	}

	
	public void save(MultipartFile file) {
	    try {
	      List<Job> jobs = ExcelHelper.excelToJobs(file.getInputStream());
	      jobDao.saveAll(jobs);
	    } catch (IOException e) {
	      throw new RuntimeException("fail to store excel data: " + e.getMessage());
	    }
	  }

}
