package com.poc.controller;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.poc.model.ErrorResponse;
import com.poc.model.Job;
import com.poc.model.SuccessResponse;
import com.poc.service.JobService;
import com.poc.utility.ExcelHelper;

@RestController
@RequestMapping("job")
public class JobController {

	@Autowired
	private JobService jobService;

	ErrorResponse errorResponse = new ErrorResponse();
	Logger logger = Logger.getLogger(this.getClass());

	@PostMapping("/postjob")
	public ResponseEntity<Object> createJob(@RequestBody Job job) {
		logger.debug("incoming request for createJob JobController ::::" + job);
		if (job.getJobTitle() != null && !job.getJobTitle().isEmpty() && job.getJobDescription() != null
				&& !job.getJobDescription().isEmpty() && job.getCountry() != null && !job.getCountry().isEmpty()
				&& job.getState() != null && !job.getState().isEmpty() && job.getAvailability() != null
				&& !job.getAvailability().isEmpty() && job.getReplyRate() != 0 && job.getPayRate() != 0
				&& job.getExperience() != 0 && job.getSkills() != null && !job.getSkills().isEmpty()
				&& job.getLanguage() != null && !job.getLanguage().isEmpty() && job.getJobType() != null
				&& job.getUserInfo().getUserName() != null && !job.getUserInfo().getUserName().isEmpty()) {

			SuccessResponse createjob = jobService.createJob(job);
			logger.debug("response for createJob JobController ::::" + createjob);
			return new ResponseEntity<Object>(createjob, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);
		}

	}

	@GetMapping("getjob/{id}")
	public ResponseEntity<Object> findJobById(@PathVariable int id) {
		logger.debug("incoming request for findJobById JobController ::::" + id);
		if (id >= 0) {
			SuccessResponse jobById = jobService.getJobById(id);
			logger.debug("response for createJob JobController ::::" + jobById);
			return new ResponseEntity<Object>(jobById, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}

	@GetMapping("getByType/{type}")
	public ResponseEntity<Object> findJobByType(@PathVariable String type) {
		logger.debug("incoming request for findJobByType JobController ::::" + type);
		if (!type.isEmpty()) {
			SuccessResponse jobByType = jobService.getJobByType(type);
			logger.debug("response for createJob JobController ::::" + createjob);
			return new ResponseEntity<Object>(jobByType, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@GetMapping("getByExp/{exp}")
	public ResponseEntity<Object> findJobByExp(@PathVariable int exp) {
		logger.debug("incoming request for findJobByExp JobController ::::" + exp);
		if (exp >= 0) {
			SuccessResponse JobByExp = jobService.getJobByExp(exp);
			return new ResponseEntity<Object>(JobByExp, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@GetMapping("getByCountry/{country}")
	public ResponseEntity<Object> findJobByCountry(@PathVariable String country) {
		logger.debug("incoming request for findJobByCountry JobController ::::" + country);
		if (country != null) {
			SuccessResponse JobByCountry = jobService.getJobByCountry(country);
			return new ResponseEntity<Object>(JobByCountry, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@GetMapping("getByAvailability/{availability}")
	public ResponseEntity<Object> findJobByAvailability(@PathVariable String availability) {
		logger.debug("incoming request for findJobByAvailability JobController ::::" + availability);
		if (availability != null) {
			SuccessResponse JobByAvailability = jobService.getJobByAvailability(availability);
			return new ResponseEntity<Object>(JobByAvailability, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@GetMapping("getByLanguage/{language}")
	public ResponseEntity<Object> findJobByLanguage(@PathVariable String language) {
		logger.debug("incoming request for findJobByLanguage JobController ::::" + language);
		if (language != null) {
			SuccessResponse JobByLanguage = jobService.getJobByLanguage(language);
			return new ResponseEntity<Object>(JobByLanguage, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@GetMapping("getByPayRate/{low}/{high}")
	public ResponseEntity<Object> findJobByPayrate(@PathVariable("low") int low, @PathVariable("high") int high) {
		logger.debug("incoming request for findJobByPayrate JobController ::::" + low + " " +  high);

		if (low >= 0 && high >= 0) {
			SuccessResponse jobByPayRate = jobService.getJobByPayRate(low, high);
			return new ResponseEntity<Object>(jobByPayRate, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@GetMapping("getalljobs")
	public ResponseEntity<Object> findAllJobs() {

		SuccessResponse getAllJobs = jobService.getAllJobs();
		if (getAllJobs != null) {
			return new ResponseEntity<Object>(getAllJobs, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@GetMapping("getBySkills/{skills}")
	public ResponseEntity<Object> findBySkills(@PathVariable String skills) {
		logger.debug("incoming request for findJobByLanguage JobController ::::" + skills);
		SuccessResponse getJobBySkills = jobService.getJobBySkills(skills);
		if (getJobBySkills != null) {
			return new ResponseEntity<Object>(getJobBySkills, HttpStatus.OK);
		} else {
			errorResponse.setStatusCode("422");
			errorResponse.setStatusMessage("Invalid Job request");
			return new ResponseEntity<Object>(errorResponse, HttpStatus.UNPROCESSABLE_ENTITY);

		}
	}

	@PostMapping("/processjobexcel")
	public ResponseEntity<Object> uploadFile(@RequestParam("file") MultipartFile file) {
		String message = "";

		if (ExcelHelper.hasExcelFormat(file)) {
			try {
				jobService.save(file);

				message = "Uploaded the file successfully: " + file.getOriginalFilename();
				return new ResponseEntity<Object>(HttpStatus.OK);
			} catch (Exception e) {
				message = "Could not upload the file: " + file.getOriginalFilename() + "!";
				return new ResponseEntity<Object>(HttpStatus.EXPECTATION_FAILED);
			}
		}

		message = "Please upload an excel file!";
		return new ResponseEntity<Object>(HttpStatus.BAD_REQUEST);
	}
}
